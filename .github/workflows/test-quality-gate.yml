name: Test Quality Gate

on:
  pull_request:
  push:
    branches: [main]

env:
  NODE_VERSION: "20.18.0"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  checks: write

jobs:
  test-quality:
    name: Test Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run tests with coverage
        run: pnpm --filter @capture-bridge/foundation test:coverage

      - name: Enforce 80% coverage threshold
        run: |
          echo "## üìä Coverage Quality Gate" >> $GITHUB_STEP_SUMMARY

          # Check if coverage summary exists
          if [ ! -f packages/foundation/coverage/coverage-summary.json ]; then
            echo "‚ùå Coverage report not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Extract coverage percentages using Node.js
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('packages/foundation/coverage/coverage-summary.json', 'utf8')).total;

            const metrics = {
              'Lines': { pct: coverage.lines.pct, threshold: 80 },
              'Functions': { pct: coverage.functions.pct, threshold: 80 },
              'Branches': { pct: coverage.branches.pct, threshold: 75 },
              'Statements': { pct: coverage.statements.pct, threshold: 80 }
            };

            let failed = false;
            console.log('\\n### Coverage Results\\n');

            for (const [name, data] of Object.entries(metrics)) {
              const status = data.pct >= data.threshold ? '‚úÖ' : '‚ùå';
              const message = \`\${status} \${name}: \${data.pct}% (threshold: \${data.threshold}%)\`;
              console.log(message);

              if (data.pct < data.threshold) {
                failed = true;
              }
            }

            if (failed) {
              console.log('\\n‚ùå Coverage thresholds not met');
              process.exit(1);
            } else {
              console.log('\\n‚úÖ All coverage thresholds met');
            }
          " | tee -a $GITHUB_STEP_SUMMARY

      - name: Check behavioral test ratio (70%)
        run: |
          echo "## üß™ Behavioral Test Ratio Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è  **Skipped for foundation package**" >> $GITHUB_STEP_SUMMARY
          echo "Foundation is a TestKit verification package with unit/integration tests for the testing framework itself." >> $GITHUB_STEP_SUMMARY
          echo "Behavioral test ratio gate applies only to application packages (capture, cli, storage)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Gate check skipped (not applicable)" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: packages/foundation/coverage
          retention-days: 30
