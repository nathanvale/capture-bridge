name: CI

on:
  pull_request:
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.18.0"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  checks: write

jobs:
  # Single job - Turborepo orchestrates everything
  validate:
    name: Validate
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for turbo --filter

      - name: Setup PNPM
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      # PR: Only validate affected packages
      - name: Validate affected packages (PR)
        if: github.event_name == 'pull_request'
        run: |
          turbo run build lint typecheck test \
            --filter="...[origin/${{ github.event.pull_request.base.ref }}]" \
            --output-logs=new-only

      # Push to main/develop: Validate everything
      - name: Validate all packages (Push)
        if: github.event_name == 'push'
        run: |
          turbo run build lint typecheck test \
            --output-logs=errors-only

      # Manual trigger: Validate everything
      - name: Validate all packages (Manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          turbo run build lint typecheck test \
            --output-logs=errors-only

      # Foundation package coverage enforcement (80% threshold)
      - name: Enforce foundation coverage threshold
        if: always() # Run even if tests fail
        run: |
          echo "## üìä Foundation Coverage Quality Gate" >> $GITHUB_STEP_SUMMARY

          # Check if coverage summary exists
          if [ ! -f packages/foundation/coverage/coverage-summary.json ]; then
            echo "‚ö†Ô∏è Coverage report not found (tests may have been skipped or failed)" >> $GITHUB_STEP_SUMMARY
            exit 0 # Don't fail if tests didn't run
          fi

          # Extract coverage percentages using Node.js
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('packages/foundation/coverage/coverage-summary.json', 'utf8')).total;

            const metrics = {
              'Lines': { pct: coverage.lines.pct, threshold: 80 },
              'Functions': { pct: coverage.functions.pct, threshold: 80 },
              'Branches': { pct: coverage.branches.pct, threshold: 75 },
              'Statements': { pct: coverage.statements.pct, threshold: 80 }
            };

            let failed = false;
            console.log('\\n### Coverage Results\\n');

            for (const [name, data] of Object.entries(metrics)) {
              const status = data.pct >= data.threshold ? '‚úÖ' : '‚ùå';
              const message = \`\${status} \${name}: \${data.pct}% (threshold: \${data.threshold}%)\`;
              console.log(message);

              if (data.pct < data.threshold) {
                failed = true;
              }
            }

            if (failed) {
              console.log('\\n‚ùå Foundation coverage thresholds not met');
              process.exit(1);
            } else {
              console.log('\\n‚úÖ All foundation coverage thresholds met');
            }
          " | tee -a $GITHUB_STEP_SUMMARY

      # Upload coverage artifacts for analysis
      - name: Upload foundation coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: foundation-coverage-${{ github.sha }}
          path: packages/foundation/coverage
          retention-days: 30

  # Only run on push to main - informational only
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage
          retention-days: 30

      - name: Coverage summary
        run: |
          echo "## üìä Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
              const c = require('./coverage/coverage-summary.json').total;
              console.log('Lines: ' + c.lines.pct + '%');
              console.log('Statements: ' + c.statements.pct + '%');
              console.log('Functions: ' + c.functions.pct + '%');
              console.log('Branches: ' + c.branches.pct + '%');
            " | tee -a $GITHUB_STEP_SUMMARY
          fi
